Index: app/src/main/java/com/example/moonword/Game.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.moonword;\r\n\r\nimport java.util.ArrayList;\r\nimport java.util.HashMap;\r\nimport java.util.Iterator;\r\nimport java.util.Random;\r\n\r\nimport SetMap.Map.MapInterficie;\r\nimport SetMap.Map.UnsortedArrayMap;\r\nimport SetMap.Set.Pair;\r\nimport SetMap.Set.SetInterficie;\r\n\r\npublic class Game {\r\n\r\n    /**\r\n     * static de moment, idea de instanciar Game, per joc\r\n     */\r\n    public static final char[] abecedari = \"abcdefghijklmnopqrstuvwxyzç\".toCharArray();\r\n    public static final Random random = new Random();\r\n\r\n    private MapInterficie<Integer, ArrayList<String>> mapNumSol;\r\n    private MapInterficie<String, Integer> mapWordsSol;\r\n    private SetInterficie<String> setFoundWords;\r\n\r\n    private HashMap<Character, Integer> setChars = new HashMap<>();\r\n    private int tamLLetraMax;\r\n\r\n    public Game(int tamLletraMax){\r\n        this.tamLLetraMax = tamLletraMax;\r\n\r\n    }\r\n    public static boolean esParaulaSolucio(String p1, String p2){\r\n        MapInterficie<Character, Integer> p1char = new UnsortedArrayMap<>(p1.length()),\r\n                p2char = new UnsortedArrayMap<>(p2.length());\r\n        addStringToMap(p1, p1char);\r\n        addStringToMap(p2, p2char);\r\n        Iterator<Pair<Character, Integer>> p2Iter = p2char.iterator();\r\n        while(p2Iter.hasNext()){\r\n            char c = p2Iter.next().getKey();\r\n\r\n            if(p1char.get(c)==null || !p2char.get(c).equals(p1char.get(c))){\r\n                return false;\r\n            }\r\n        }\r\n        return true;\r\n    }\r\n\r\n\r\n\r\n    private static void addStringToMap(String p, MapInterficie<Character, Integer> map){\r\n        for(char c:p.toCharArray()){\r\n            if(map.get(c)==null){\r\n                map.put(c,1);\r\n            }else{\r\n                map.put(c,map.get(c)+1);\r\n            }\r\n        }\r\n    }\r\n\r\n    public int getTamLLetraMax(){\r\n        return tamLLetraMax;\r\n    }\r\n\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/example/moonword/Game.java b/app/src/main/java/com/example/moonword/Game.java
--- a/app/src/main/java/com/example/moonword/Game.java	(revision d8ee69379fb3853a6461a74942e78c72a22e56ae)
+++ b/app/src/main/java/com/example/moonword/Game.java	(date 1714895193274)
@@ -1,9 +1,11 @@
 package com.example.moonword;
 
 import java.util.ArrayList;
+import java.util.HashSet;
 import java.util.HashMap;
 import java.util.Iterator;
 import java.util.Random;
+import java.util.TreeMap;
 
 import SetMap.Map.MapInterficie;
 import SetMap.Map.UnsortedArrayMap;
@@ -18,17 +20,63 @@
     public static final char[] abecedari = "abcdefghijklmnopqrstuvwxyzç".toCharArray();
     public static final Random random = new Random();
 
-    private MapInterficie<Integer, ArrayList<String>> mapNumSol;
+    private HashMap<Integer, HashSet<String>> mapNumSol;
     private MapInterficie<String, Integer> mapWordsSol;
     private SetInterficie<String> setFoundWords;
 
     private HashMap<Character, Integer> setChars = new HashMap<>();
     private int tamLLetraMax;
 
-    public Game(int tamLletraMax){
-        this.tamLLetraMax = tamLletraMax;
+    public Game(int tamLLetraMax){
+        this.tamLLetraMax = tamLLetraMax;
+        String paraulaLletres = creaParaulaLletres(tamLLetraMax);
+        addStringToMap(paraulaLletres,setChars);
+        mapNumSol = crearParaulesSol(paraulaLletres);
+    }
+
+
+    private String creaParaulaLletres(int num){
+        TreeMap<Integer, HashSet<String>> dic = DictReader.getMapNumWords();
+        HashSet<String> possibles = dic.get(num);
+        if(possibles== null){
+            return "";
+        }
+        Iterator<String> iter = possibles.iterator();
+        Random r = new Random();
+        int max = r.nextInt(possibles.size());
+        for (int i = 0; i < max-1; i++) {
+            iter.next();
+        }
+       return iter.next();
+    }
 
+    private HashMap<Integer, HashSet<String>> crearParaulesSol(String p){
+        HashMap<Integer, HashSet<String>> mapNumSol = new HashMap<>();
+        TreeMap<Integer, HashSet<String>> dic = DictReader.getMapNumWords();
+        if(dic== null){
+            return null;
+        }
+        Iterator<Integer> iterTree = dic.keySet().iterator();
+        while(iterTree.hasNext()){
+            HashSet<String> aux = new HashSet<>();
+
+            int i = iterTree.next();
+
+            HashSet<String> paraules = dic.get(i);
+
+            Iterator<String> iterP = paraules.iterator();
+            for (int j = 0; j < paraules.size(); j++) {
+                String paraula = iterP.next();
+                if(esParaulaSolucio(p,paraula)){
+                    aux.add(paraula);
+                }
+            }
+            mapNumSol.put(i,aux);
+
+        }
+        return mapNumSol;
     }
+
     public static boolean esParaulaSolucio(String p1, String p2){
         MapInterficie<Character, Integer> p1char = new UnsortedArrayMap<>(p1.length()),
                 p2char = new UnsortedArrayMap<>(p2.length());
@@ -56,6 +104,16 @@
             }
         }
     }
+
+    private static void addStringToMap(String p, HashMap<Character, Integer> map){
+        for(char c:p.toCharArray()){
+            if(map.get(c)==null){
+                map.put(c,1);
+            }else{
+                map.put(c,map.get(c)+1);
+            }
+        }
+    }
 
     public int getTamLLetraMax(){
         return tamLLetraMax;
